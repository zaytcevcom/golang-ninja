// Code generated by ent, DO NOT EDIT.

package store

import (
	"time"

	"github.com/zaytcevcom/golang-ninja/internal/store/chat"
	"github.com/zaytcevcom/golang-ninja/internal/store/message"
	"github.com/zaytcevcom/golang-ninja/internal/store/problem"
	"github.com/zaytcevcom/golang-ninja/internal/store/schema"
	"github.com/zaytcevcom/golang-ninja/internal/types"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	chatFields := schema.Chat{}.Fields()
	_ = chatFields
	// chatDescCreatedAt is the schema descriptor for created_at field.
	chatDescCreatedAt := chatFields[2].Descriptor()
	// chat.DefaultCreatedAt holds the default value on creation for the created_at field.
	chat.DefaultCreatedAt = chatDescCreatedAt.Default.(func() time.Time)
	// chatDescID is the schema descriptor for id field.
	chatDescID := chatFields[0].Descriptor()
	// chat.DefaultID holds the default value on creation for the id field.
	chat.DefaultID = chatDescID.Default.(func() types.ChatID)
	messageFields := schema.Message{}.Fields()
	_ = messageFields
	// messageDescCreatedAt is the schema descriptor for created_at field.
	messageDescCreatedAt := messageFields[10].Descriptor()
	// message.DefaultCreatedAt holds the default value on creation for the created_at field.
	message.DefaultCreatedAt = messageDescCreatedAt.Default.(func() time.Time)
	// messageDescID is the schema descriptor for id field.
	messageDescID := messageFields[0].Descriptor()
	// message.DefaultID holds the default value on creation for the id field.
	message.DefaultID = messageDescID.Default.(func() types.MessageID)
	problemFields := schema.Problem{}.Fields()
	_ = problemFields
	// problemDescCreatedAt is the schema descriptor for created_at field.
	problemDescCreatedAt := problemFields[4].Descriptor()
	// problem.DefaultCreatedAt holds the default value on creation for the created_at field.
	problem.DefaultCreatedAt = problemDescCreatedAt.Default.(func() time.Time)
	// problemDescID is the schema descriptor for id field.
	problemDescID := problemFields[0].Descriptor()
	// problem.DefaultID holds the default value on creation for the id field.
	problem.DefaultID = problemDescID.Default.(func() types.ProblemID)
}
