# https://taskfile.dev
version: '3'

silent: true

vars:
  GO_MODULE: github.com/zaytcevcom/golang-ninja
  GO_FILES:
    sh: find . -type f -name '*.go' -not -path "./vendor/*" -not -path "*.gen.go" | tr "\n" " "

  GOLANGCI_LINT_VERSION: v1.56.2
  GOLANGCI_LINT_CACHE:
    sh: |
      if [ "$(uname)" = "Darwin" ]; then
        echo "$HOME/Library/Caches"
      else
        echo "$HOME/.cache"
      fi

  DOCKER_COMPOSE_PATHS:
    - ./deploy/local/docker-compose.yml
    - ./deploy/local/docker-compose.sentry.yml

  COMPOSE_PROJECT_NAME: ninja

tasks:
  default:
    cmds:
      - task: info
      - task: tidy
      - task: fmt
      - task: lint
      - task: tests
      - task: build

  info:
    - echo "- Info"
    - docker run --rm -v "$PWD:/app" -w /app dev-tools go version

  tidy:
    - echo "- Tidy"
    - go mod tidy
    - task: vendor

  vendor:
    - echo "- Vendor"
    - go mod vendor

  fmt:
    cmds:
      - echo "- Format"
      - docker run --rm -v "$PWD:/app" -w /app dev-tools gofumpt -w {{.GO_FILES}}
      - |
          docker run --rm -v "$PWD:/app" -w /app dev-tools gci write \
            --section standard \
            --section default \
            --section "Prefix({{.GO_MODULE}})" \
            --custom-order \
            --skip-generated \
            {{.GO_FILES}}

  lint:
    cmds:
      - echo "- Lint"
      - mkdir -p {{.GOLANGCI_LINT_CACHE}}
      - task: lint:cmd
        vars: {CLI_ARGS: "run --fix --timeout=5m ./..."}

  lint:cmd:
    cmds:
      - docker run --rm -v "$(pwd):/app" -w /app -v "{{.GOLANGCI_LINT_CACHE}}:/root/.cache" dev-tools golangci-lint {{.CLI_ARGS}}

  tests:
    cmds:
      - echo "- Tests"
      - docker run --rm -v "$PWD:/app" -w /app dev-tools go test -race ./...

  build:
    cmds:
      - echo "- Build"
      - go build ./cmd/chat-service

  dev-tools:build:
    cmds:
      - echo "- Building dev-tools image"
      - docker build -t dev-tools -f ./tools/Dockerfile .

  generate:
    - echo "Run go generate..."
    - docker run --rm -v "$PWD:/app" -w /app dev-tools go generate ./...

  deps:
    cmds:
      - echo "- Starting dependencies"
      - docker compose -p {{.COMPOSE_PROJECT_NAME}} {{range .DOCKER_COMPOSE_PATHS}} -f {{.}} {{end}} up -d

  deps:cmd:
    cmds:
      - echo "- Executing docker compose command"
      - docker compose -p {{.COMPOSE_PROJECT_NAME}} {{range .DOCKER_COMPOSE_PATHS}} -f {{.}} {{end}} {{.CLI_ARGS}}

  deps:status:
    cmds:
      - echo "- Docker compose status"
      - docker compose -p {{.COMPOSE_PROJECT_NAME}} {{range .DOCKER_COMPOSE_PATHS}} -f {{.}} {{end}} ps

  deps:logs:
    cmds:
      - echo "- Docker compose logs"
      - docker compose -p {{.COMPOSE_PROJECT_NAME}} {{range .DOCKER_COMPOSE_PATHS}} -f {{.}} {{end}} logs --follow {{.CLI_ARGS}}

  deps:stop:
    cmds:
      - echo "- Stopping docker compose services"
      - docker compose -p {{.COMPOSE_PROJECT_NAME}} {{range .DOCKER_COMPOSE_PATHS}} -f {{.}} {{end}} stop

  deps:reset-psql:
    cmds:
      - task: deps:reset
        vars:
          SERVICE: postgres

  deps:reset:
    cmds:
      - "{{.DOCKER_COMPOSE_CMD}} rm -fsv {{.SERVICE}}"
      - "{{.DOCKER_COMPOSE_CMD}} up -d {{.SERVICE}}"

# COMPOSE_PROFILES=sentry task deps
# task deps:cmd -- exec sentry sentry upgrade
# task deps:cmd -- restart sentry

# go run ./cmd/chat-service -config configs/config.toml